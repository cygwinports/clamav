--- origsrc/clamav-0.97.8/libclamav/bytecode_detect.c	2013-04-17 10:25:09.000000000 -0500
+++ src/clamav-0.97.8/libclamav/bytecode_detect.c	2013-05-13 10:38:51.962472500 -0500
@@ -234,8 +234,10 @@ void cli_detect_environment(struct cli_e
     env->os_category = os_win64;
 #elif defined(_WIN32)
     env->os_category = os_win32;
+#elif defined(__CYGWIN__)
+    env->os_category = os_cygwin;
 #else
-    env->os_category = os_generic;
+    env->os_category = os_unknown;
 #endif
 
     env->os = llvm_os_UnknownOS;
--- origsrc/clamav-0.99/libclamav/bytecode_detect.h	2015-09-18 15:48:45.000000000 -0500
+++ src/clamav-0.99/libclamav/bytecode_detect.h	2016-03-28 21:03:39.381049300 -0500
@@ -64,6 +64,7 @@ enum os_kind_conf {
   os_solaris,
   os_win32,
   os_win64,
+  os_cygwin,
   os_ANY = 0xff
 };
 
--- origsrc/clamav-0.97.8/libclamav/c++/bytecode2llvm.cpp	2013-04-17 10:25:09.000000000 -0500
+++ src/clamav-0.97.8/libclamav/c++/bytecode2llvm.cpp	2013-05-13 10:38:51.962472500 -0500
@@ -330,6 +330,9 @@ extern "C" void __chkstk(void);
 extern "C" void _chkstk(void);
 #endif
 #endif
+#ifdef __CYGWIN__
+extern "C" void _alloca(void);
+#endif
 // Resolve integer libcalls, but nothing else.
 static void* noUnknownFunctions(const std::string& name) {
     void *addr =
@@ -354,6 +357,9 @@ static void* noUnknownFunctions(const st
 	.Case("_chkstk", (void*)(intptr_t)_chkstk)
 #endif
 #endif
+#ifdef __CYGWIN__
+	.Case("_alloca", (void*)(intptr_t)_alloca)
+#endif
 	.Default(0);
     if (addr)
 	return addr;
--- origsrc/clamav-0.99/libclamav/c++/detect.cpp	2016-02-11 17:27:09.228223900 -0600
+++ src/clamav-0.99/libclamav/c++/detect.cpp	2016-02-11 14:30:14.227290000 -0600
@@ -167,6 +169,9 @@ void cli_detect_env_jit(struct cli_envir
 	case Triple::Win32:
 	     env->os = llvm_os_Win32;
 	     if (env->os_category != os_win32 &&
+#if LLVM_VERSION > 34
+		 env->os_category != os_cygwin &&
+#endif
 		 env->os_category != os_win64)
 		 warn_assumptions("Operating System", env->os_category, Triple::Win32);
 	     break;
--- origsrc/clamav-0.99/libclamav/c++/llvm/lib/ExecutionEngine/JIT/JIT.cpp	2015-05-28 16:56:25.000000000 -0500
+++ src/clamav-0.99/libclamav/c++/llvm/lib/ExecutionEngine/JIT/JIT.cpp	2016-02-11 14:48:29.284844600 -0600
@@ -67,7 +67,7 @@ extern "C" void LLVMLinkInJIT() {
 }
 
 
-#if defined(__GNUC__) && !defined(__ARM_EABI__) && !defined(__USING_SJLJ_EXCEPTIONS__)
+#if defined(__GNUC__) && !defined(__ARM_EABI__) && !defined(__USING_SJLJ_EXCEPTIONS__) && !defined(__SEH__)
  
 // libgcc defines the __register_frame function to dynamically register new
 // dwarf frames for exception handling. This functionality is not portable
@@ -309,7 +309,7 @@ JIT::JIT(Module *M, TargetMachine &tm, T
   }
   
   // Register routine for informing unwinding runtime about new EH frames
-#if defined(__GNUC__) && !defined(__ARM_EABI__) && !defined(__USING_SJLJ_EXCEPTIONS__)
+#if defined(__GNUC__) && !defined(__ARM_EABI__) && !defined(__USING_SJLJ_EXCEPTIONS__) && !defined(__SEH__)
 #if USE_KEYMGR
   struct LibgccObjectInfo* LOI = (struct LibgccObjectInfo*)
     _keymgr_get_and_lock_processwide_ptr(KEYMGR_GCC3_DW2_OBJ_LIST);
